openapi: "3.0.0"
info:
  title: Personal Knowledge Base Simple API
  version: 1.0.0
servers:
  - url: http://localhost:5000
paths:
  /categories:
    get:
      summary: Retrieve a list of all categories
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
    post:
      summary: Create a new category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryPostArgs'
      responses:
        '201':
          description: Category created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update an existing category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryPostArgs'
      responses:
        '204':
          description: Category updated
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a category
      responses:
        '204':
          description: Category deleted
        '404':
          description: Category not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /categories/{category_id}:
    get:
      summary: Retrieve a specific category by ID
      parameters:
        - in: path
          name: category_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a category by ID
      parameters:
        - in: path
          name: category_id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Category deleted
        '404':
          description: Category not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /categories/{category_id}/commands:
    get:
      summary: Retrieve a list of commands for a specific category
      parameters:
        - in: path
          name: category_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Command'
    post:
      summary: Create a new command for a specific category
      parameters:
        - in: path
          name: category_id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommandPostArgs'
      responses:
        '201':
          description: Command created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Command'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $
